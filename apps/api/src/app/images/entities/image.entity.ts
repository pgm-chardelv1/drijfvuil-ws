import { Field, ObjectType } from '@nestjs/graphql';
import {
  Column,
  CreateDateColumn,
  Entity,
  OneToMany,
  OneToOne,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from 'typeorm';
import { City } from '../../cities/entities/city.entity';
import { Quarter } from '../../quarters/entities/quarter.entity';
import { Report } from '../../reports/entities/report.entity';

/**
 * Define the Image TypeORM entity
 * and GraphQL ObjectType
 *
 * @export Image
 * @class Image
 */
@Entity('image')
@ObjectType()
export class Image {
  /**
   * Image ID
   *
   * @type {string} Autogenerated uuid
   * @memberof Image
   */
  @PrimaryGeneratedColumn('uuid')
  @Field(() => String, { description: 'Image ID' })
  id: string;

  /**
   * Image URL
   *
   * @type {string}
   * @memberof Image
   */
  @Column('varchar')
  @Field(() => String, { description: 'Image URL', nullable: true })
  url?: string;

  /**
   * Image key (Filename on Amazon S3)
   *
   * @type {string}
   * @memberof Image
   */
  @Column('varchar')
  @Field(() => String, { description: 'Image Key' })
  key: string;

  /**
   * Autogenerated field with Date the image was created
   *
   * @type {Date}
   * @memberof Image
   */
  @CreateDateColumn()
  @Field(() => Date, { description: 'Image was created at' })
  createdAt: Date;

  /**
   * Autogenerated field with Date the image was updated
   *
   * @type {Date}
   * @memberof Image
   */
  @UpdateDateColumn()
  @Field(() => Date, { description: 'Image last updated at' })
  updatedAt: Date;

  /**
   * Relations to Report entity
   * One Image can belong to one Report
   * @type {Report}
   * @memberof Image
   */
  @OneToOne(() => Report, (report) => report.image)
  @Field(() => Report, {
    description: 'The report the image is linked to',
    nullable: true,
  })
  report?: Report;

  /**
   * Relations to Quarter entity
   * One Quarter can have many Images
   *
   * @type {Quarter}
   * @memberof Image
   */
  @OneToMany(() => Quarter, (quarter) => quarter.images, {
    cascade: true,
    onDelete: 'CASCADE',
    onUpdate: 'CASCADE',
  })
  @Field(() => Quarter, { nullable: true })
  quarter?: Quarter;

  /**
   * Relations to City entity
   * One City can have many Images
   *
   * @type {City}
   * @memberof Image
   */
  @OneToMany(() => City, (city) => city.images, {
    cascade: true,
    onDelete: 'CASCADE',
    onUpdate: 'CASCADE',
  })
  @Field(() => City, { nullable: true })
  city?: City;
}
